rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Función para verificar si el usuario está autenticado
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Función para verificar si el usuario es el propietario del documento
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Función para verificar si el usuario es administrador
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/authorizedUsers/$(request.auth.token.email)) &&
        get(/databases/$(database)/documents/authorizedUsers/$(request.auth.token.email)).data.role == 'admin';
    }

    // Reglas para la colección de usuarios autorizados
    match /authorizedUsers/{email} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Reglas para la colección de promociones
    match /promotions/{promotionId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Reglas para la colección de notas
    match /notes/{noteId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }

    // Reglas para la colección de presupuestos
    match /budgets/{budgetId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
  }
} 